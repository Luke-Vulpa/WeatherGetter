using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace WeatherGetter.Models.LocationModels
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //


        public partial class Locations //: IEnumerable<Location>
        {
            [JsonProperty("Location")]
            public List<Location> Location { get; set; }

            //public IEnumerator<Location> GetEnumerator()
            //{
            //    return Location.GetEnumerator();
            //}

            //IEnumerator IEnumerable.GetEnumerator()
            //{
            //    return Location.GetEnumerator();
            //}
        }

        public partial class Location
        {
            //[JsonProperty("elevation", NullValueHandling = NullValueHandling.Ignore)]
            //public string Elevation { get; set; }

            [JsonProperty("id")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Id { get; set; }

            [JsonProperty("latitude")]
            public double Latitude { get; set; }

            [JsonProperty("longitude")]
            public double Longitude { get; set; }

            [JsonProperty("name")]
            public string Name { get; set; }

            //[JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
            //public Region? Region { get; set; }

            //[JsonProperty("unitaryAuthArea", NullValueHandling = NullValueHandling.Ignore)]
            //public string UnitaryAuthArea { get; set; }

            //[JsonProperty("obsSource", NullValueHandling = NullValueHandling.Ignore)]
            //public ObsSource? ObsSource { get; set; }

            //[JsonProperty("nationalPark", NullValueHandling = NullValueHandling.Ignore)]
            //public NationalPark? NationalPark { get; set; }
        }

        public enum NationalPark { BreconBeaconsNationalPark, CairngormsNationalPark, DartmoorNationalPark, ExmoorNationalPark, LakeDistrictNationalPark, LochLomondAndTheTrossachsNationalPark, NewForestNationalPark, NorthYorkMoorsNationalPark, NorthumberlandNationalPark, PeakDistrictNationalPark, PembrokeshireCoastNationalPark, SnowdoniaNationalPark, SouthDownsNationalPark, TheBroads, TheMournes, YorkshireDalesNationalPark };

        public enum ObsSource { Lndsyn };

        public enum Region { Dg, Ee, Em, Gr, He, Ne, Ni, Nw, Os, Se, St, Sw, Ta, Wl, Wm, Yh };



        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                NationalParkConverter.Singleton,
                ObsSourceConverter.Singleton,
                RegionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }

        internal class NationalParkConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(NationalPark) || t == typeof(NationalPark?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "Brecon Beacons National Park":
                        return NationalPark.BreconBeaconsNationalPark;
                    case "Cairngorms National Park":
                        return NationalPark.CairngormsNationalPark;
                    case "Dartmoor National Park":
                        return NationalPark.DartmoorNationalPark;
                    case "Exmoor National Park":
                        return NationalPark.ExmoorNationalPark;
                    case "Lake District National Park":
                        return NationalPark.LakeDistrictNationalPark;
                    case "Loch Lomond and the Trossachs National Park":
                        return NationalPark.LochLomondAndTheTrossachsNationalPark;
                    case "New Forest National Park":
                        return NationalPark.NewForestNationalPark;
                    case "North York Moors National Park":
                        return NationalPark.NorthYorkMoorsNationalPark;
                    case "Northumberland National Park":
                        return NationalPark.NorthumberlandNationalPark;
                    case "Peak District National Park":
                        return NationalPark.PeakDistrictNationalPark;
                    case "Pembrokeshire Coast National Park":
                        return NationalPark.PembrokeshireCoastNationalPark;
                    case "Snowdonia National Park":
                        return NationalPark.SnowdoniaNationalPark;
                    case "South Downs National Park":
                        return NationalPark.SouthDownsNationalPark;
                    case "The Broads":
                        return NationalPark.TheBroads;
                    case "The Mournes":
                        return NationalPark.TheMournes;
                    case "Yorkshire Dales National Park":
                        return NationalPark.YorkshireDalesNationalPark;
                }
                throw new Exception("Cannot unmarshal type NationalPark");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (NationalPark)untypedValue;
                switch (value)
                {
                    case NationalPark.BreconBeaconsNationalPark:
                        serializer.Serialize(writer, "Brecon Beacons National Park");
                        return;
                    case NationalPark.CairngormsNationalPark:
                        serializer.Serialize(writer, "Cairngorms National Park");
                        return;
                    case NationalPark.DartmoorNationalPark:
                        serializer.Serialize(writer, "Dartmoor National Park");
                        return;
                    case NationalPark.ExmoorNationalPark:
                        serializer.Serialize(writer, "Exmoor National Park");
                        return;
                    case NationalPark.LakeDistrictNationalPark:
                        serializer.Serialize(writer, "Lake District National Park");
                        return;
                    case NationalPark.LochLomondAndTheTrossachsNationalPark:
                        serializer.Serialize(writer, "Loch Lomond and the Trossachs National Park");
                        return;
                    case NationalPark.NewForestNationalPark:
                        serializer.Serialize(writer, "New Forest National Park");
                        return;
                    case NationalPark.NorthYorkMoorsNationalPark:
                        serializer.Serialize(writer, "North York Moors National Park");
                        return;
                    case NationalPark.NorthumberlandNationalPark:
                        serializer.Serialize(writer, "Northumberland National Park");
                        return;
                    case NationalPark.PeakDistrictNationalPark:
                        serializer.Serialize(writer, "Peak District National Park");
                        return;
                    case NationalPark.PembrokeshireCoastNationalPark:
                        serializer.Serialize(writer, "Pembrokeshire Coast National Park");
                        return;
                    case NationalPark.SnowdoniaNationalPark:
                        serializer.Serialize(writer, "Snowdonia National Park");
                        return;
                    case NationalPark.SouthDownsNationalPark:
                        serializer.Serialize(writer, "South Downs National Park");
                        return;
                    case NationalPark.TheBroads:
                        serializer.Serialize(writer, "The Broads");
                        return;
                    case NationalPark.TheMournes:
                        serializer.Serialize(writer, "The Mournes");
                        return;
                    case NationalPark.YorkshireDalesNationalPark:
                        serializer.Serialize(writer, "Yorkshire Dales National Park");
                        return;
                }
                throw new Exception("Cannot marshal type NationalPark");
            }

            public static readonly NationalParkConverter Singleton = new NationalParkConverter();
        }

        internal class ObsSourceConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(ObsSource) || t == typeof(ObsSource?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                if (value == "LNDSYN")
                {
                    return ObsSource.Lndsyn;
                }
                throw new Exception("Cannot unmarshal type ObsSource");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (ObsSource)untypedValue;
                if (value == ObsSource.Lndsyn)
                {
                    serializer.Serialize(writer, "LNDSYN");
                    return;
                }
                throw new Exception("Cannot marshal type ObsSource");
            }

            public static readonly ObsSourceConverter Singleton = new ObsSourceConverter();
        }

        internal class RegionConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(Region) || t == typeof(Region?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                switch (value)
                {
                    case "dg":
                        return Region.Dg;
                    case "ee":
                        return Region.Ee;
                    case "em":
                        return Region.Em;
                    case "gr":
                        return Region.Gr;
                    case "he":
                        return Region.He;
                    case "ne":
                        return Region.Ne;
                    case "ni":
                        return Region.Ni;
                    case "nw":
                        return Region.Nw;
                    case "os":
                        return Region.Os;
                    case "se":
                        return Region.Se;
                    case "st":
                        return Region.St;
                    case "sw":
                        return Region.Sw;
                    case "ta":
                        return Region.Ta;
                    case "wl":
                        return Region.Wl;
                    case "wm":
                        return Region.Wm;
                    case "yh":
                        return Region.Yh;
                }
                throw new Exception("Cannot unmarshal type Region");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (Region)untypedValue;
                switch (value)
                {
                    case Region.Dg:
                        serializer.Serialize(writer, "dg");
                        return;
                    case Region.Ee:
                        serializer.Serialize(writer, "ee");
                        return;
                    case Region.Em:
                        serializer.Serialize(writer, "em");
                        return;
                    case Region.Gr:
                        serializer.Serialize(writer, "gr");
                        return;
                    case Region.He:
                        serializer.Serialize(writer, "he");
                        return;
                    case Region.Ne:
                        serializer.Serialize(writer, "ne");
                        return;
                    case Region.Ni:
                        serializer.Serialize(writer, "ni");
                        return;
                    case Region.Nw:
                        serializer.Serialize(writer, "nw");
                        return;
                    case Region.Os:
                        serializer.Serialize(writer, "os");
                        return;
                    case Region.Se:
                        serializer.Serialize(writer, "se");
                        return;
                    case Region.St:
                        serializer.Serialize(writer, "st");
                        return;
                    case Region.Sw:
                        serializer.Serialize(writer, "sw");
                        return;
                    case Region.Ta:
                        serializer.Serialize(writer, "ta");
                        return;
                    case Region.Wl:
                        serializer.Serialize(writer, "wl");
                        return;
                    case Region.Wm:
                        serializer.Serialize(writer, "wm");
                        return;
                    case Region.Yh:
                        serializer.Serialize(writer, "yh");
                        return;
                }
                throw new Exception("Cannot marshal type Region");
            }

            public static readonly RegionConverter Singleton = new RegionConverter();
        }
    }



